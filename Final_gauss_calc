#define RMS_calculation_cxx
#include "RMS_calculation.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <iostream>
#include <TFile.h>
#include <TGraph.h>
#include <map>
#include <TLegend.h>
#include <string>
#include <numeric>
#include <TF2.h>
#include "CathodeFit.C"

float oldw_wmeanX, oldw_wmeanY, oldw_wmeanZ;
float w_meanXR, w_meanXL, w_meanYC, w_meanZC, w_meanZR, w_meanZL;
float w_errXR, w_errXL, w_errYC, w_errZC, w_errZR, w_errZL;
float w_sum;
float sum;
float res_C, res_R_wall, res_L_wall, res_3D;
float newres_x, newres_y, newres_z;
float oldres_x, oldres_y, oldres_z;
float gauss_resY;
std::vector<Float_t> hit_vectorXR, hit_vectorXL, hit_vectorZC, hit_vectorZR, hit_vectorZL;
std::vector<Float_t> weight_hit_vectorXR, weight_hit_vectorXL, weight_hit_vectorZC, weight_hit_vectorZR, weight_hit_vectorZL;
std::vector<Float_t> RMS_vectorX, RMS_vectorY, RMS_vectorZ;
std::vector<Float_t> TrueX_vector, TrueY_vector, TrueZ_vector;
std::vector<Float_t> vector_newresy;
std::vector<Float_t> RMS_vectorY_lowE, RMS_vectorY_midE, RMS_vectorY_highE;
std::vector<Float_t> TrueX_vector_lowE, TrueX_vector_midE, TrueX_vector_highE;



struct Flash_info {
      float w_sumXR = 0;
      float w_sumXL = 0;
      float w_sumYC = 0;
      float w_sumZC = 0;
      float w_sumZL = 0;
      float w_sumZR = 0;
      float sumC = 0;
      float sumR = 0;
      float sumL = 0;
      float oldw_sumX = 0;
      float oldw_sumY = 0;
      float oldw_sumZ = 0;
      float old_sumweight = 0;
      std::vector<Float_t> hit_vectorXR;
      std::vector<Float_t> hit_vectorXL;
      std::vector<Float_t> hit_vectorZC;
      std::vector<Float_t> hit_vectorZR;
      std::vector<Float_t> hit_vectorZL;
      std::vector<Float_t> hit_vectorYC;
      std::vector<Float_t> weight_hit_vectorXR;
      std::vector<Float_t> weight_hit_vectorXL;
      std::vector<Float_t> weight_hit_vectorZC;
      std::vector<Float_t> weight_hit_vectorZR;
      std::vector<Float_t> weight_hit_vectorZL;
      std::vector<Float_t> weight_hit_vectorYC;
      std::vector<Float_t> hit_time_vector;
      std::vector<Float_t> hit_ChNumber_vector;

//       TH2F* hist2D4 = new TH2F("hist2D4", "Cathode edge points", 100, 0, 0, 100, 0, 2200);

};

float rms_calc(std::vector<float> coord, std::vector<float> weight, float mean){
   float value = 0;
   float sum_weights = 0;
   for(int k=0; k<coord.size();k++){
      value += pow((coord.at(k) - mean), 2)*weight.at(k);
      sum_weights += weight.at(k);
   }
   if (sum_weights > 0){
      value = pow(value/sum_weights, 0.5);
   }
   else{
      value = 0;
   }
   return value;

}

float combined_mean_calc(std::vector<float> coord, std::vector<float> weight){
   float value = 0;
   float sum_weights = 0;
   for (int i=0; i<coord.size();i++){
      value += coord.at(i)*weight.at(i);
      sum_weights += weight.at(i);
   }
   if (sum_weights > 0){
      value = value/sum_weights;
   }
   else{

      value = 0;
   }
   return value;

}

void RMS_calculation::Loop()


{
   TFile *f=new TFile("RMS_calculation.root","RECREATE");
//    double array1[112];
//    double array2[112];
//    std::cout << Channel_Yordered->size() << std::endl;
//    for (int p=0; p<112; p++){
//       array1[p] = Channel_Yordered->at(p+56);
//       array2[p] = Channel_Zordered->at(p+56);
//    }
//    PDhitlist Fitter(112,array1,array2, -737, 737, 0, 2000);
//   In a ROOT session, you can do:
//      root> .L RMS_calc.C
//      root> RMS_calc t
//      root> t.GetEntry(12); // Fill t data members with entry number 12
//      root> t.Show();       // Show values of entry 12
//      root> t.Show(16);     // Read and show values of entry 16
//      root> t.Loop();       // Loop on all entries
//

//     This is the loop skeleton where:
//    jentry is the global entry number in the chain
//    ientry is the entry number in the current Tree
//  Note that the argument to GetEntry must be:
//    jentry for TChain::GetEntry
//    ientry for TTree::GetEntry and TBranch::GetEntry
//
//       To read only selected branches, Insert statements like:
// METHOD1:
//    fChain->SetBranchStatus("*",0);  // disable all branches
//    fChain->SetBranchStatus("branchname",1);  // activate branchname
// METHOD2: replace line
//    fChain->GetEntry(jentry);       //read all branches
//by  b_branchname->GetEntry(ientry); //read only this branch
   if (fChain == 0) return;

   Long64_t nentries = fChain->GetEntriesFast();


   Long64_t nbytes = 0, nb = 0;
   TH1F* hist = new TH1F("hist","Resolution for 2D reconstruction", 100, 0, 0);
   TH1F* hist1 = new TH1F("hist1","Resolution for 2D reconstruction", 100, 0, 0);
   TH1F* hist2 = new TH1F("hist2","Resolution for 2D reconstruction", 100, 0, 0);
   TH1F* hist3 = new TH1F("hist3","Resolution for 3D reconstruction", 100, 0, 0);
   TH1F* hist4 = new TH1F("hist4","Resolution for 3D reconstruction", 100, 0, 0);
   TH1F* hist5 = new TH1F("hist5","Resolution for 3D reconstruction", 100, 0, 0);
   TH1F* hist6 = new TH1F("hist6","Error 0 points #PEs", 100, 0, 0);
   TH1F* hist7 = new TH1F("hist7","Time profile", 100, 0, 0);
   TH1F* hist8 = new TH1F("hist8","2D clustering resolution", 100, 0, 0);
   TH1F* hist9 = new TH1F("hist9","gaussian resolution", 100, 0, 0);
   TH2F* hist2D = new TH2F("hist2D", "True yz, erry = 0", 100, 0, 0, 100, 0, 2200);
   TH2F* hist2D1 = new TH2F("hist2D1", "True yz, errz = 0", 100, 0, 0, 100, 0, 2200);
   TH2F* hist2D2 = new TH2F("hist2D2", "True xy, erry = 0", 100, 0, 0, 100, 0, 2200);
   TH2F* hist2D3 = new TH2F("hist2D3", "True xy, errz = 0", 100, 0, 0, 100, 0, 2200);
   TF2 *f2 = new TF2("f2", "xygaus", -737, 737, 0, 2200);
   hist -> SetDirectory(0);
   hist1 -> SetDirectory(0);
   hist2 -> SetDirectory(0);
   hist3 -> SetDirectory(0);
   hist4 -> SetDirectory(0);
   hist5 -> SetDirectory(0);
   hist6 -> SetDirectory(0);
   hist7-> SetDirectory(0);
   hist8-> SetDirectory(0);
   hist9-> SetDirectory(0);
   hist2D -> SetDirectory(0);
   hist2D1 -> SetDirectory(0);
   hist2D2 -> SetDirectory(0);
   hist2D3 -> SetDirectory(0);
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      // if (Cut(ientry) < 0) continue;
      double array1[112];
      double array2[112];
      double fit_params[5];
      if (jentry == 0){
         for (int p=0; p<112; p++){
            array1[p] = Channel_Yordered->at(p+56);
            array2[p] = Channel_Zordered->at(p+56);
//          std::cout << "Map arrays: " << " " << p << " " << array1[p] << " " << array2[p] << std::endl;
         }
      }
   PDhitlist Fitter(112,array1,array2, -737, 737, 0, 2000);
      std::map<int, Flash_info> flashes;

      for (int j = 0; j<OpHitChannel_Flash->size(); j++){
         if(flashes.count(OpFlashNumber->at(j)) == 0){
            flashes[OpFlashNumber->at(j)] = Flash_info();
         }
         Flash_info &flash = flashes[OpFlashNumber->at(j)];


         if (Channel_X->at(j) < -320){ //here I would add something like && abs(flash.chY - Channel_Y->at(j)) < distZ or something to account for the same distancing in Z
//             flash.w_sumX += Channel_X->at(j)*OpHitPE_Flash->at(j);
            flash.w_sumYC += Channel_Y->at(j)*OpHitPE_Flash->at(j);
            flash.w_sumZC += Channel_Z->at(j)*OpHitPE_Flash->at(j);
            flash.sumC += OpHitPE_Flash->at(j);
            flash.hit_vectorYC.push_back(Channel_Y->at(j));
            flash.hit_vectorZC.push_back(Channel_Z->at(j));
            flash.weight_hit_vectorZC.push_back(OpHitPE_Flash->at(j));
            flash.weight_hit_vectorYC.push_back(OpHitPE_Flash->at(j));
            flash.hit_ChNumber_vector.push_back(OpHitChannel_Flash->at(j)-56);
//             std::cout << OpHitChannel_Flash->at(j) << " " << Channel_Y->at(j) << " " << Channel_Z->at(j) << std::endl;
//             flash.hist2D4 -> Fill(Channel_Y->at(j), Channel_Z->at(j), OpHitPE_Flash->at(j));

         }

         //Left wall reconstruction (x,z)
         if (Channel_Y->at(j) < -700){
            flash.w_sumXL += Channel_X->at(j)*OpHitPE_Flash->at(j);
//             flash.w_sumY += Channel_Y->at(j)*OpHitPE_Flash->at(j);
            flash.w_sumZL += Channel_Z->at(j)*OpHitPE_Flash->at(j);
            flash.sumL += OpHitPE_Flash->at(j);
            flash.hit_vectorXL.push_back(Channel_X->at(j));
            flash.hit_vectorZL.push_back(Channel_Z->at(j));
            flash.weight_hit_vectorXL.push_back(OpHitPE_Flash->at(j));
            flash.weight_hit_vectorZL.push_back(OpHitPE_Flash->at(j));
         }

         //Right wall reconstruction (x,z)
         if (Channel_Y->at(j) > 700){ //here I would add something like && abs(flash.chY - Channel_Y->at(j)) < distZ or something to account for the same distancing in Z
            flash.w_sumXR += Channel_X->at(j)*OpHitPE_Flash->at(j);
//             flash.w_sumY += Channel_Y->at(j)*OpHitPE_Flash->at(j);
            flash.w_sumZR += Channel_Z->at(j)*OpHitPE_Flash->at(j);
            flash.sumR += OpHitPE_Flash->at(j);
            flash.hit_vectorXR.push_back(Channel_X->at(j));
            flash.hit_vectorZR.push_back(Channel_Z->at(j));
            flash.weight_hit_vectorZR.push_back(OpHitPE_Flash->at(j));
            flash.weight_hit_vectorXR.push_back(OpHitPE_Flash->at(j));
         }
         flash.hit_time_vector.push_back(OpHittime_Flash->at(j));
         flash.oldw_sumX += Channel_X->at(j)*OpHitPE_Flash->at(j);
         flash.oldw_sumY += Channel_Y->at(j)*OpHitPE_Flash->at(j);
         flash.oldw_sumZ += Channel_Z->at(j)*OpHitPE_Flash->at(j);
         flash.old_sumweight += OpHitPE_Flash->at(j);


         }
      for(const auto& [hitchannel, flash] : flashes){

         if (hitchannel > 0){
            break;
         }
         for (int l=0; l<flash.hit_ChNumber_vector.size(); l++){
            Fitter.Addhit(flash.hit_ChNumber_vector.at(l), flash.weight_hit_vectorYC.at(l));

         }
         if(flash.hit_ChNumber_vector.size() > 1){
            Fitter.Fit();
            ROOT::Fit::FitResult result = Fitter.FitResult();
            RMS_vectorY.push_back(rms_calc(flash.hit_vectorYC, flash.weight_hit_vectorYC, w_meanYC));
            Fitter.Clear();
//             const double *myresults = result.GetParams();
//             fit_params[0] = *result.GetParams()[0];
//             std::cout << "Gauss Y: " << " " << result.GetParams()[1] << std::endl;
//             std::cout << "Gauss Z: " << " " << result.GetParams()[3] << std::endl;
//             if (TrueY > 400 || TrueY < -400){
            hist9 -> Fill(abs(result.GetParams()[1] - TrueY));
            hist1 -> Fill(abs(result.GetParams()[3] - TrueZ));
//             }
         }
         oldw_wmeanX = flash.oldw_sumX/flash.old_sumweight;
         oldw_wmeanY = flash.oldw_sumY/flash.old_sumweight;
         oldw_wmeanZ = flash.oldw_sumZ/flash.old_sumweight;
         w_meanXR = 0;
         w_errXR = 0;
         if (flash.hit_vectorXR.size() > 0){
            w_meanXR = flash.w_sumXR/flash.sumR;
            w_errXR = rms_calc(flash.hit_vectorXR, flash.weight_hit_vectorXR, w_meanXR)/pow(flash.weight_hit_vectorXR.size(), 0.5);
         }
         w_meanXL = 0;
         w_errXL = 0;
         if (flash.hit_vectorXL.size() > 0){
            w_meanXL = flash.w_sumXL/flash.sumL;
            w_errXL = rms_calc(flash.hit_vectorXL, flash.weight_hit_vectorXL, w_meanXL)/pow(flash.weight_hit_vectorXL.size(), 0.5);
         }
         w_meanYC = 0;
         w_errYC = 0;
         if(flash.hit_vectorYC.size() > 0){
            w_meanYC = flash.w_sumYC/flash.sumC;
            w_errYC = rms_calc(flash.hit_vectorYC, flash.weight_hit_vectorYC, w_meanYC)/pow(flash.weight_hit_vectorYC.size(), 0.5);
         }
         w_meanZC = 0;
         w_errZC = 0;
         if (flash.hit_vectorZC.size() > 0){
            w_meanZC = flash.w_sumZC/flash.sumC;
            w_errZC = rms_calc(flash.hit_vectorZC, flash.weight_hit_vectorZC, w_meanZC)/pow(flash.weight_hit_vectorZC.size(), 0.5);
         }
         w_meanZR = 0;
         w_errZR = 0;
         if (flash.hit_vectorZR.size() > 0){
            w_meanZR = flash.w_sumZR/flash.sumR;
            w_errZR = rms_calc(flash.hit_vectorZR, flash.weight_hit_vectorZR, w_meanZR)/pow(flash.weight_hit_vectorZR.size(), 0.5);
         }
         w_meanZL = 0;
         w_errZL = 0;
         if (flash.hit_vectorZL.size() > 0){
            w_meanZL = flash.w_sumZL/flash.sumL;
            w_errZL = rms_calc(flash.hit_vectorZL, flash.weight_hit_vectorZL, w_meanZL)/pow(flash.weight_hit_vectorZL.size(), 0.5);
         }
         std::vector<float> xmean_vec;
         std::vector<float> zmean_vec;
         std::vector<float> xweight_vec;
         std::vector<float> zweight_vec;
         if (w_errXR > 0){
            xmean_vec.push_back(w_meanXR);
            xweight_vec.push_back(w_errXR);
         }
         if (w_errXL > 0){
            xmean_vec.push_back(w_meanXL);
            xweight_vec.push_back(w_errXL);
         }
         if (w_errZR > 0){
            zmean_vec.push_back(w_meanZR);
            zweight_vec.push_back(w_errZR);
         }
         if (w_errZL > 0){
            zmean_vec.push_back(w_meanZL);
            zweight_vec.push_back(w_errZL);
         }
         if (w_errZC > 0){
            zmean_vec.push_back(w_meanZC);
            zweight_vec.push_back(w_errZC);
         }
         float combined_x = combined_mean_calc(xmean_vec, xweight_vec);
         float combined_z = combined_mean_calc(zmean_vec, zweight_vec);
         float combined_errx = 0;
         float combined_errz = 0;
         if (xmean_vec.size() > 1){
            combined_errx = rms_calc(xmean_vec, xweight_vec, combined_x)/pow(xmean_vec.size(), 0.5);
         }
         else if(xmean_vec.size() == 1){
            combined_errx = xweight_vec.at(0);

         }
         if (zmean_vec.size() > 1){
            combined_errz = rms_calc(zmean_vec, zweight_vec, combined_z)/pow(zmean_vec.size(), 0.5);
         }
         else if(zmean_vec.size() == 1){
            combined_errz = zweight_vec.at(0);

         }

//          std::cout << "X: " << combined_x << " " << combined_errx << std::endl;
//          std::cout << "Z: " << combined_z << " " << TrueZ << std::endl;
//          std::cout << " Right wall X: " << " " << w_meanXR << " " << w_errXR << " " << flash.hit_vectorXR.size() << std::endl;
//          std::cout << " Left wall X: " << " " << w_meanXL << " " << w_errXL << " " << flash.hit_vectorXL.size() << std::endl;
//             std::cout << " Cathode Z: " << " " << w_meanZC << " " << w_errZC << " " << flash.hit_vectorZC.size() << std::endl;
//             std::cout << " Right wall Z: " << " " << w_meanZR << " " << w_errZR << " " << flash.hit_vectorZR.size() << std::endl;
//             std::cout << " Left wall Z: " << " " << w_meanZL << " " << w_errZL << " " << flash.hit_vectorZL.size() << std::endl;
//             std::cout << "Cathode Y: " << w_meanYC << " " << TrueY << std::endl;
            if(combined_errx > 0){
               newres_x = abs(combined_x - TrueX);
               hist -> Fill(newres_x);
            }
            if(w_errYC > 0){
                  newres_y = abs(w_meanYC - TrueY);
                  vector_newresy.push_back(newres_y);
//                   if (TrueY > 400 || TrueY < -400){
//                   hist1 -> Fill(newres_y);
//                   }
//                   if (TrueE > 0.004 && TrueE < 0.01){
//                      RMS_vectorY.push_back(rms_calc(flash.hit_vectorYC, flash.weight_hit_vectorYC, w_meanYC));
                     TrueY_vector.push_back(TrueY);
                     TrueX_vector.push_back(TrueX);
//                   }
//                   else if(TrueE > 0.01 && TrueE < 0.03){
//                   RMS_vectorY_midE.push_back(rms_calc(flash.hit_vectorYC, flash.weight_hit_vectorYC, w_meanYC));
//                   TrueX_vector_midE.push_back(TrueX);
//                   }
//                   else if(TrueE > 0.03 && TrueE < 0.08){
//                   RMS_vectorY_highE.push_back(rms_calc(flash.hit_vectorYC, flash.weight_hit_vectorYC, w_meanYC));
//                   TrueX_vector_highE.push_back(TrueX);
//                   }


               }
               else{
                  hist2D -> Fill(TrueY, TrueZ);
                  hist2D2 -> Fill(TrueX, TrueY);
                  hist6 -> Fill(flash.sumC + flash.sumL +flash.sumR);



            }
            if(combined_errz > 0){
                  newres_z = abs(combined_z - TrueZ);
                  hist2 -> Fill(newres_z);
                  RMS_vectorZ.push_back(rms_calc(zmean_vec, zweight_vec, combined_z));
                  TrueZ_vector.push_back(TrueZ);
               }
            else{
               hist2D1 -> Fill(TrueY, TrueZ);
               hist2D3 -> Fill(TrueX, TrueY);

            }

            oldres_x = abs(oldw_wmeanX - TrueX);
            oldres_y = abs(oldw_wmeanY - TrueY);
            oldres_z = abs(oldw_wmeanZ - TrueZ);
            hist3 -> Fill(oldres_x);
            hist4 -> Fill(oldres_y);
            hist5 -> Fill(oldres_z);
            for (int t = 0; t<flash.hit_time_vector.size(); t++){
//                std::cout << flash.hit_time_vector.at(t) << std::endl;
               hist7 -> Fill(flash.hit_time_vector.at(t));

            }
// //             flash.f2->GetParameter(1);
//             std::cout << f2->GetParameter(1) << " " << TrueY << " " << gauss_resY << " " << f2->GetParameter(3) << " " << TrueZ << " " << combined_z << std::endl;
//
//
//
//
//       }
//             for(int j=0; j<RecoXVector->size();j++){
//                oldres_x = abs(RecoXVector->at(j) - TrueX);
//                oldres_y = abs(YCenterVector->at(j) - TrueY);
//                oldres_z = abs(ZCenterVector->at(j) - TrueZ);
//                hist -> Fill(oldres_x);
//                hist1 -> Fill(oldres_y);
//                hist2 -> Fill(oldres_z);
//             }

   }
}
//    std::cout << w_meanY << std::endl;

   //Plot new 2D reco
//    auto c = new TCanvas("histogram", "2D weighted mean fit vs gaussian fit");
//    TGraph *gr4 = new TGraph(TrueY_vector.size(), &TrueY_vector[0], &RMS_vectorY[0]);
//    gr4 -> SetTitle("RMS Y vs true X coordinate; true energy cut");
//    gr4 -> GetXaxis() -> SetTitle("TrueY (cm)");
//    gr4 -> GetYaxis() -> SetTitle("RMS Y");
//    gr4 -> Draw("AP");

      hist1 -> Draw();
      hist1 -> GetXaxis()->SetTitle("Resolution (cm)");
      hist1 -> SetTitle("Gaussian resolution yz plane, largest flash");
      hist1 -> SetLineColor(kRed);
//       hist -> SetLineColor(kGreen);
//       hist -> GetXaxis()->SetTitle("Resolution (cm)");
//       hist -> Draw("SAME");
      hist9 -> GetXaxis()->SetTitle("Resolution (cm)");
      hist9 -> Draw("SAME");
//       hist2D -> Draw("COLZ");

   auto legend1 = new TLegend();
//    legend1 -> AddEntry(hist, Form("New mean X:  %5.2f (cm)", hist->GetMean())); //Form("New mean: " %5.2f, std::to_string(hist->GetMean()).c_str())
   legend1 -> AddEntry(hist1, Form("Gauss resolution Z:  %5.2f (cm)", hist1->GetMean()));
   legend1 -> AddEntry(hist9, Form("Gauss resolution Y:  %5.2f (cm)", hist9->GetMean()));
   legend1 -> Draw();

   //Plot old 3D reco

//    auto h = new TCanvas("histogram3", "True yz, errz = 0");
//       hist5 -> GetXaxis()->SetTitle("Resolution (cm)");
//       hist5 -> Draw();
//       hist3 -> SetLineColor(kGreen);
//       hist3 -> GetXaxis()->SetTitle("Resolution (cm)");
//       hist3 -> Draw("SAME");
//       hist4 -> Draw("SAME");
//       hist4 -> GetXaxis()->SetTitle("Resolution (cm)");
//       hist4 -> SetLineColor(kRed);
//    hist2D1 -> Draw("COLZ");
//    TGraph *gr3 = new TGraph(TrueX_vector.size(), &TrueX_vector[0], &RMS_vectorY[0]);
//    gr3 -> SetTitle("Resolution Y vs true neutrino y");
//    gr3 -> GetXaxis() -> SetTitle("True X (cm)");
//    gr3 -> GetYaxis() -> SetTitle("RMS Y (cm)");
//    gr3 -> Draw("AP   ");


//    auto h2 = new TCanvas("histogram2", "True xy, erry = 0");
//    hist2D2 -> Draw("COLZ");
//    TGraph *gr1 = new TGraph(RMS_vectorY_highE.size(), &TrueX_vector_highE[0], &RMS_vectorY_highE[0]);
//    gr1 -> SetTitle("RMS y vs true neutrino y");
//    gr1 -> GetXaxis() -> SetTitle("True Y (cm)");
//    gr1 -> GetYaxis() -> SetTitle("RMS Y");
//    gr1 -> SetMarkerColor(kGreen);
//    gr1 -> Draw("SAMEP");

//    auto h1 = new TCanvas("histogram1", "True xy, errz = 0");
//    hist2D3 -> Draw("COLZ");
//    hist6 -> Draw();
//    TGraph *gr2 = new TGraph(RMS_vectorY.size(), &TrueX_vector[0], &RMS_vectorY[0]);
//    gr2 -> SetTitle("RMS y vs true neutrino x");
//    gr2 -> GetXaxis() -> SetTitle("True X (cm)");
//    gr2 -> GetYaxis() -> SetTitle("RMS Y");
//    gr2 -> Draw("AP");
//    hist7 -> SetTitle("Neutrino time profile");
//    hist7 -> GetXaxis()->SetTitle("Hit time (us)");
//    hist7 -> Draw();



//    auto legend1 = new TLegend();
//    legend1 -> AddEntry(hist3, Form("New mean X:  %5.2f (cm)", hist3->GetMean())); //Form("New mean: " %5.2f, std::to_string(hist->GetMean()).c_str())
//    legend1 -> AddEntry(hist4, Form("New mean Y:  %5.2f (cm)", hist4->GetMean()));
//    legend1 -> AddEntry(hist5, Form("New mean Z:  %5.2f (cm)", hist5->GetMean()));
//    legend1 -> Draw();
//    auto gr = new TGraph(n, x, y);

   f->Close();
}
