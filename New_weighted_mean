#define RMS_calculation_cxx
#include "RMS_calculation.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <iostream>
#include <TFile.h>
#include <TGraph.h>
#include <map>

float w_meanY;
float w_meanZ;
float w_sum;
float sum;
float dist = 100;

struct Flash_info {
      float w_sumY = 0;
      float w_sumZ = 0;
      float sum = 0;
      float max_PE = 0;
      float chY = -999;
      float chZ = -999;
};


void RMS_calculation::Loop()



{
   TFile *f=new TFile("RMS_calculation.root","RECREATE");
//   In a ROOT session, you can do:
//      root> .L RMS_calc.C
//      root> RMS_calc t
//      root> t.GetEntry(12); // Fill t data members with entry number 12
//      root> t.Show();       // Show values of entry 12
//      root> t.Show(16);     // Read and show values of entry 16
//      root> t.Loop();       // Loop on all entries
//

//     This is the loop skeleton where:
//    jentry is the global entry number in the chain
//    ientry is the entry number in the current Tree
//  Note that the argument to GetEntry must be:
//    jentry for TChain::GetEntry
//    ientry for TTree::GetEntry and TBranch::GetEntry
//
//       To read only selected branches, Insert statements like:
// METHOD1:
//    fChain->SetBranchStatus("*",0);  // disable all branches
//    fChain->SetBranchStatus("branchname",1);  // activate branchname
// METHOD2: replace line
//    fChain->GetEntry(jentry);       //read all branches
//by  b_branchname->GetEntry(ientry); //read only this branch
   if (fChain == 0) return;

   Long64_t nentries = fChain->GetEntriesFast();


   Long64_t nbytes = 0, nb = 0;
   TH1F* hist = new TH1F("hist","Weighted mean average Y axis", 100, 0, 0);
   TH1F* hist1 = new TH1F("hist1","Weighted mean average Z axis", 100, 0, 0);
   hist -> SetDirectory(0);
   for (Long64_t jentry=0; jentry<1;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      // if (Cut(ientry) < 0) continue;
      std::map<int, Flash_info> flashes;

      for (int j = 0; j<OpHitChannel_Flash->size(); j++){
         if(flashes.count(OpFlashNumber->at(j)) == 0){
            flashes[OpFlashNumber->at(j)] = Flash_info();
         }
         Flash_info &flash = flashes[OpFlashNumber->at(j)];
         for (int i=0; i<OpHitChannel_Flash->size(); i++){
            if (OpHitPE_Flash->at(i) > flash.max_PE){
                  flash.max_PE = OpHitPE_Flash->at(i);
                  flash.chY = Channel_Y->at(i);
//                   flash.chZ = Channel_Z->at(i);
            }
         }
//          std::cout << flash.max_PE << " " << flash.chY << std::endl;
         if (abs(flash.chY - Channel_Y->at(j)) < dist){ //here I would add something like && abs(flash.chY - Channel_Y->at(j)) < distZ or something to account for the same distancing in Z
            flash.w_sumY += Channel_Y->at(j)*OpHitPE_Flash->at(j);
//             flash.w_sumZ += Channel_Z->at(j)*OpHitPE_Flash->at(j);
            flash.sum += OpHitPE_Flash->at(j);
            std::cout << Channel_Y->at(j) << std::endl;
         }

         }
      for(const auto& [hitchannel, flash] : flashes){
         w_meanY = flash.w_sumY/flash.sum;
//          w_meanZ = flash.w_sumZ/flash.sum;
         std::cout << w_meanY << std::endl;
         hist -> Fill(w_meanY);
//          hist1 -> Fill(w_meanZ);
      }

   }
//    std::cout << w_mean << std::endl;
   //std::cout << nentries << std::endl;
   auto c = new TCanvas("hist", "Weighted mean average Y axis");
   hist -> Draw();
//    hist1 -> Draw();
   f->Close();
}
